// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock_pnapctl is a generated GoMock package.
package mock_pnapctl

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	http "net/http"
	reflect "reflect"
)

// MockWebClient is a mock of WebClient interface
type MockWebClient struct {
	ctrl     *gomock.Controller
	recorder *MockWebClientMockRecorder
}

// MockWebClientMockRecorder is the mock recorder for MockWebClient
type MockWebClientMockRecorder struct {
	mock *MockWebClient
}

// NewMockWebClient creates a new mock instance
func NewMockWebClient(ctrl *gomock.Controller) *MockWebClient {
	mock := &MockWebClient{ctrl: ctrl}
	mock.recorder = &MockWebClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWebClient) EXPECT() *MockWebClientMockRecorder {
	return m.recorder
}

// PerformGet mocks base method
func (m *MockWebClient) PerformGet(resource string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PerformGet", resource)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PerformGet indicates an expected call of PerformGet
func (mr *MockWebClientMockRecorder) PerformGet(resource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerformGet", reflect.TypeOf((*MockWebClient)(nil).PerformGet), resource)
}

// PerformPost mocks base method
func (m *MockWebClient) PerformPost(resource string, body io.Reader) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PerformPost", resource, body)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PerformPost indicates an expected call of PerformPost
func (mr *MockWebClientMockRecorder) PerformPost(resource, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerformPost", reflect.TypeOf((*MockWebClient)(nil).PerformPost), resource, body)
}
