// Code generated by MockGen. DO NOT EDIT.
// Source: common/client/client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	bmcapi "gitlab.com/phoenixnap/bare-metal-cloud/go-sdk.git/bmcapi"
)

// MockSdkClient is a mock of SdkClient interface.
type MockSdkClient struct {
	ctrl     *gomock.Controller
	recorder *MockSdkClientMockRecorder
}

// MockSdkClientMockRecorder is the mock recorder for MockSdkClient.
type MockSdkClientMockRecorder struct {
	mock *MockSdkClient
}

// NewMockSdkClient creates a new mock instance.
func NewMockSdkClient(ctrl *gomock.Controller) *MockSdkClient {
	mock := &MockSdkClient{ctrl: ctrl}
	mock.recorder = &MockSdkClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSdkClient) EXPECT() *MockSdkClientMockRecorder {
	return m.recorder
}

// ServerDelete mocks base method.
func (m *MockSdkClient) ServerDelete(serverId string) (bmcapi.DeleteResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerDelete", serverId)
	ret0, _ := ret[0].(bmcapi.DeleteResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ServerDelete indicates an expected call of ServerDelete.
func (mr *MockSdkClientMockRecorder) ServerDelete(serverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerDelete", reflect.TypeOf((*MockSdkClient)(nil).ServerDelete), serverId)
}

// ServerGetById mocks base method.
func (m *MockSdkClient) ServerGetById(serverId string) (bmcapi.Server, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerGetById", serverId)
	ret0, _ := ret[0].(bmcapi.Server)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ServerGetById indicates an expected call of ServerGetById.
func (mr *MockSdkClientMockRecorder) ServerGetById(serverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerGetById", reflect.TypeOf((*MockSdkClient)(nil).ServerGetById), serverId)
}

// ServerPowerOff mocks base method.
func (m *MockSdkClient) ServerPowerOff(serverId string) (bmcapi.ActionResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerPowerOff", serverId)
	ret0, _ := ret[0].(bmcapi.ActionResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ServerPowerOff indicates an expected call of ServerPowerOff.
func (mr *MockSdkClientMockRecorder) ServerPowerOff(serverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerPowerOff", reflect.TypeOf((*MockSdkClient)(nil).ServerPowerOff), serverId)
}

// ServerPowerOn mocks base method.
func (m *MockSdkClient) ServerPowerOn(serverId string) (bmcapi.ActionResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerPowerOn", serverId)
	ret0, _ := ret[0].(bmcapi.ActionResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ServerPowerOn indicates an expected call of ServerPowerOn.
func (mr *MockSdkClientMockRecorder) ServerPowerOn(serverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerPowerOn", reflect.TypeOf((*MockSdkClient)(nil).ServerPowerOn), serverId)
}

// ServerReboot mocks base method.
func (m *MockSdkClient) ServerReboot(serverId string) (bmcapi.ActionResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerReboot", serverId)
	ret0, _ := ret[0].(bmcapi.ActionResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ServerReboot indicates an expected call of ServerReboot.
func (mr *MockSdkClientMockRecorder) ServerReboot(serverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerReboot", reflect.TypeOf((*MockSdkClient)(nil).ServerReboot), serverId)
}

// ServerReset mocks base method.
func (m *MockSdkClient) ServerReset(serverId string, serverReset bmcapi.ServerReset) (bmcapi.ResetResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerReset", serverId, serverReset)
	ret0, _ := ret[0].(bmcapi.ResetResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ServerReset indicates an expected call of ServerReset.
func (mr *MockSdkClientMockRecorder) ServerReset(serverId, serverReset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerReset", reflect.TypeOf((*MockSdkClient)(nil).ServerReset), serverId, serverReset)
}

// ServerShutdown mocks base method.
func (m *MockSdkClient) ServerShutdown(serverId string) (bmcapi.ActionResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerShutdown", serverId)
	ret0, _ := ret[0].(bmcapi.ActionResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ServerShutdown indicates an expected call of ServerShutdown.
func (mr *MockSdkClientMockRecorder) ServerShutdown(serverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerShutdown", reflect.TypeOf((*MockSdkClient)(nil).ServerShutdown), serverId)
}

// ServersGet mocks base method.
func (m *MockSdkClient) ServersGet() ([]bmcapi.Server, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServersGet")
	ret0, _ := ret[0].([]bmcapi.Server)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ServersGet indicates an expected call of ServersGet.
func (mr *MockSdkClientMockRecorder) ServersGet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServersGet", reflect.TypeOf((*MockSdkClient)(nil).ServersGet))
}

// ServersPost mocks base method.
func (m *MockSdkClient) ServersPost(serverCreate bmcapi.ServerCreate) (bmcapi.Server, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServersPost", serverCreate)
	ret0, _ := ret[0].(bmcapi.Server)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ServersPost indicates an expected call of ServersPost.
func (mr *MockSdkClientMockRecorder) ServersPost(serverCreate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServersPost", reflect.TypeOf((*MockSdkClient)(nil).ServersPost), serverCreate)
}
