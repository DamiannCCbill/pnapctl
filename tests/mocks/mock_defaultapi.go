// Code generated by MockGen. DO NOT EDIT.
// Source: temp.go

// Package mock_bmcapi is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	"gitlab.com/phoenixnap/bare-metal-cloud/go-sdk.git/bmcapi"
)

// MockDefaultApi is a mock of DefaultApi interface.
type MockDefaultApi struct {
	ctrl     *gomock.Controller
	recorder *MockDefaultApiMockRecorder
}

// MockDefaultApiMockRecorder is the mock recorder for MockDefaultApi.
type MockDefaultApiMockRecorder struct {
	mock *MockDefaultApi
}

// NewMockDefaultApi creates a new mock instance.
func NewMockDefaultApi(ctrl *gomock.Controller) *MockDefaultApi {
	mock := &MockDefaultApi{ctrl: ctrl}
	mock.recorder = &MockDefaultApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDefaultApi) EXPECT() *MockDefaultApiMockRecorder {
	return m.recorder
}

// DeletePrivateNetwork mocks base method.
func (m *MockDefaultApi) DeletePrivateNetwork(ctx context.Context, serverId, privateNetworkId string) bmcapi.ApiDeletePrivateNetworkRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePrivateNetwork", ctx, serverId, privateNetworkId)
	ret0, _ := ret[0].(bmcapi.ApiDeletePrivateNetworkRequest)
	return ret0
}

// DeletePrivateNetwork indicates an expected call of DeletePrivateNetwork.
func (mr *MockDefaultApiMockRecorder) DeletePrivateNetwork(ctx, serverId, privateNetworkId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePrivateNetwork", reflect.TypeOf((*MockDefaultApi)(nil).DeletePrivateNetwork), ctx, serverId, privateNetworkId)
}

// DeletePrivateNetworkExecute mocks base method.
func (m *MockDefaultApi) DeletePrivateNetworkExecute(r bmcapi.ApiDeletePrivateNetworkRequest) (string, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePrivateNetworkExecute", r)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeletePrivateNetworkExecute indicates an expected call of DeletePrivateNetworkExecute.
func (mr *MockDefaultApiMockRecorder) DeletePrivateNetworkExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePrivateNetworkExecute", reflect.TypeOf((*MockDefaultApi)(nil).DeletePrivateNetworkExecute), r)
}

// QuotasGet mocks base method.
func (m *MockDefaultApi) QuotasGet(ctx context.Context) bmcapi.ApiQuotasGetRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuotasGet", ctx)
	ret0, _ := ret[0].(bmcapi.ApiQuotasGetRequest)
	return ret0
}

// QuotasGet indicates an expected call of QuotasGet.
func (mr *MockDefaultApiMockRecorder) QuotasGet(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotasGet", reflect.TypeOf((*MockDefaultApi)(nil).QuotasGet), ctx)
}

// QuotasGetExecute mocks base method.
func (m *MockDefaultApi) QuotasGetExecute(r bmcapi.ApiQuotasGetRequest) ([]bmcapi.Quota, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuotasGetExecute", r)
	ret0, _ := ret[0].([]bmcapi.Quota)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// QuotasGetExecute indicates an expected call of QuotasGetExecute.
func (mr *MockDefaultApiMockRecorder) QuotasGetExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotasGetExecute", reflect.TypeOf((*MockDefaultApi)(nil).QuotasGetExecute), r)
}

// QuotasQuotaIdActionsRequestEditPost mocks base method.
func (m *MockDefaultApi) QuotasQuotaIdActionsRequestEditPost(ctx context.Context, quotaId string) bmcapi.ApiQuotasQuotaIdActionsRequestEditPostRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuotasQuotaIdActionsRequestEditPost", ctx, quotaId)
	ret0, _ := ret[0].(bmcapi.ApiQuotasQuotaIdActionsRequestEditPostRequest)
	return ret0
}

// QuotasQuotaIdActionsRequestEditPost indicates an expected call of QuotasQuotaIdActionsRequestEditPost.
func (mr *MockDefaultApiMockRecorder) QuotasQuotaIdActionsRequestEditPost(ctx, quotaId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotasQuotaIdActionsRequestEditPost", reflect.TypeOf((*MockDefaultApi)(nil).QuotasQuotaIdActionsRequestEditPost), ctx, quotaId)
}

// QuotasQuotaIdActionsRequestEditPostExecute mocks base method.
func (m *MockDefaultApi) QuotasQuotaIdActionsRequestEditPostExecute(r bmcapi.ApiQuotasQuotaIdActionsRequestEditPostRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuotasQuotaIdActionsRequestEditPostExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuotasQuotaIdActionsRequestEditPostExecute indicates an expected call of QuotasQuotaIdActionsRequestEditPostExecute.
func (mr *MockDefaultApiMockRecorder) QuotasQuotaIdActionsRequestEditPostExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotasQuotaIdActionsRequestEditPostExecute", reflect.TypeOf((*MockDefaultApi)(nil).QuotasQuotaIdActionsRequestEditPostExecute), r)
}

// QuotasQuotaIdGet mocks base method.
func (m *MockDefaultApi) QuotasQuotaIdGet(ctx context.Context, quotaId string) bmcapi.ApiQuotasQuotaIdGetRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuotasQuotaIdGet", ctx, quotaId)
	ret0, _ := ret[0].(bmcapi.ApiQuotasQuotaIdGetRequest)
	return ret0
}

// QuotasQuotaIdGet indicates an expected call of QuotasQuotaIdGet.
func (mr *MockDefaultApiMockRecorder) QuotasQuotaIdGet(ctx, quotaId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotasQuotaIdGet", reflect.TypeOf((*MockDefaultApi)(nil).QuotasQuotaIdGet), ctx, quotaId)
}

// QuotasQuotaIdGetExecute mocks base method.
func (m *MockDefaultApi) QuotasQuotaIdGetExecute(r bmcapi.ApiQuotasQuotaIdGetRequest) (bmcapi.Quota, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuotasQuotaIdGetExecute", r)
	ret0, _ := ret[0].(bmcapi.Quota)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// QuotasQuotaIdGetExecute indicates an expected call of QuotasQuotaIdGetExecute.
func (mr *MockDefaultApiMockRecorder) QuotasQuotaIdGetExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotasQuotaIdGetExecute", reflect.TypeOf((*MockDefaultApi)(nil).QuotasQuotaIdGetExecute), r)
}

// ServersGet mocks base method.
func (m *MockDefaultApi) ServersGet(ctx context.Context) bmcapi.ApiServersGetRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServersGet", ctx)
	ret0, _ := ret[0].(bmcapi.ApiServersGetRequest)
	return ret0
}

// ServersGet indicates an expected call of ServersGet.
func (mr *MockDefaultApiMockRecorder) ServersGet(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServersGet", reflect.TypeOf((*MockDefaultApi)(nil).ServersGet), ctx)
}

// ServersGetExecute mocks base method.
func (m *MockDefaultApi) ServersGetExecute(r bmcapi.ApiServersGetRequest) ([]bmcapi.Server, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServersGetExecute", r)
	ret0, _ := ret[0].([]bmcapi.Server)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ServersGetExecute indicates an expected call of ServersGetExecute.
func (mr *MockDefaultApiMockRecorder) ServersGetExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServersGetExecute", reflect.TypeOf((*MockDefaultApi)(nil).ServersGetExecute), r)
}

// ServersPost mocks base method.
func (m *MockDefaultApi) ServersPost(ctx context.Context) bmcapi.ApiServersPostRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServersPost", ctx)
	ret0, _ := ret[0].(bmcapi.ApiServersPostRequest)
	return ret0
}

// ServersPost indicates an expected call of ServersPost.
func (mr *MockDefaultApiMockRecorder) ServersPost(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServersPost", reflect.TypeOf((*MockDefaultApi)(nil).ServersPost), ctx)
}

// ServersPostExecute mocks base method.
func (m *MockDefaultApi) ServersPostExecute(r bmcapi.ApiServersPostRequest) (bmcapi.Server, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServersPostExecute", r)
	ret0, _ := ret[0].(bmcapi.Server)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ServersPostExecute indicates an expected call of ServersPostExecute.
func (mr *MockDefaultApiMockRecorder) ServersPostExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServersPostExecute", reflect.TypeOf((*MockDefaultApi)(nil).ServersPostExecute), r)
}

// ServersServerIdActionsPowerOffPost mocks base method.
func (m *MockDefaultApi) ServersServerIdActionsPowerOffPost(ctx context.Context, serverId string) bmcapi.ApiServersServerIdActionsPowerOffPostRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServersServerIdActionsPowerOffPost", ctx, serverId)
	ret0, _ := ret[0].(bmcapi.ApiServersServerIdActionsPowerOffPostRequest)
	return ret0
}

// ServersServerIdActionsPowerOffPost indicates an expected call of ServersServerIdActionsPowerOffPost.
func (mr *MockDefaultApiMockRecorder) ServersServerIdActionsPowerOffPost(ctx, serverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServersServerIdActionsPowerOffPost", reflect.TypeOf((*MockDefaultApi)(nil).ServersServerIdActionsPowerOffPost), ctx, serverId)
}

// ServersServerIdActionsPowerOffPostExecute mocks base method.
func (m *MockDefaultApi) ServersServerIdActionsPowerOffPostExecute(r bmcapi.ApiServersServerIdActionsPowerOffPostRequest) (bmcapi.ActionResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServersServerIdActionsPowerOffPostExecute", r)
	ret0, _ := ret[0].(bmcapi.ActionResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ServersServerIdActionsPowerOffPostExecute indicates an expected call of ServersServerIdActionsPowerOffPostExecute.
func (mr *MockDefaultApiMockRecorder) ServersServerIdActionsPowerOffPostExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServersServerIdActionsPowerOffPostExecute", reflect.TypeOf((*MockDefaultApi)(nil).ServersServerIdActionsPowerOffPostExecute), r)
}

// ServersServerIdActionsPowerOnPost mocks base method.
func (m *MockDefaultApi) ServersServerIdActionsPowerOnPost(ctx context.Context, serverId string) bmcapi.ApiServersServerIdActionsPowerOnPostRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServersServerIdActionsPowerOnPost", ctx, serverId)
	ret0, _ := ret[0].(bmcapi.ApiServersServerIdActionsPowerOnPostRequest)
	return ret0
}

// ServersServerIdActionsPowerOnPost indicates an expected call of ServersServerIdActionsPowerOnPost.
func (mr *MockDefaultApiMockRecorder) ServersServerIdActionsPowerOnPost(ctx, serverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServersServerIdActionsPowerOnPost", reflect.TypeOf((*MockDefaultApi)(nil).ServersServerIdActionsPowerOnPost), ctx, serverId)
}

// ServersServerIdActionsPowerOnPostExecute mocks base method.
func (m *MockDefaultApi) ServersServerIdActionsPowerOnPostExecute(r bmcapi.ApiServersServerIdActionsPowerOnPostRequest) (bmcapi.ActionResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServersServerIdActionsPowerOnPostExecute", r)
	ret0, _ := ret[0].(bmcapi.ActionResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ServersServerIdActionsPowerOnPostExecute indicates an expected call of ServersServerIdActionsPowerOnPostExecute.
func (mr *MockDefaultApiMockRecorder) ServersServerIdActionsPowerOnPostExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServersServerIdActionsPowerOnPostExecute", reflect.TypeOf((*MockDefaultApi)(nil).ServersServerIdActionsPowerOnPostExecute), r)
}

// ServersServerIdActionsRebootPost mocks base method.
func (m *MockDefaultApi) ServersServerIdActionsRebootPost(ctx context.Context, serverId string) bmcapi.ApiServersServerIdActionsRebootPostRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServersServerIdActionsRebootPost", ctx, serverId)
	ret0, _ := ret[0].(bmcapi.ApiServersServerIdActionsRebootPostRequest)
	return ret0
}

// ServersServerIdActionsRebootPost indicates an expected call of ServersServerIdActionsRebootPost.
func (mr *MockDefaultApiMockRecorder) ServersServerIdActionsRebootPost(ctx, serverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServersServerIdActionsRebootPost", reflect.TypeOf((*MockDefaultApi)(nil).ServersServerIdActionsRebootPost), ctx, serverId)
}

// ServersServerIdActionsRebootPostExecute mocks base method.
func (m *MockDefaultApi) ServersServerIdActionsRebootPostExecute(r bmcapi.ApiServersServerIdActionsRebootPostRequest) (bmcapi.ActionResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServersServerIdActionsRebootPostExecute", r)
	ret0, _ := ret[0].(bmcapi.ActionResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ServersServerIdActionsRebootPostExecute indicates an expected call of ServersServerIdActionsRebootPostExecute.
func (mr *MockDefaultApiMockRecorder) ServersServerIdActionsRebootPostExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServersServerIdActionsRebootPostExecute", reflect.TypeOf((*MockDefaultApi)(nil).ServersServerIdActionsRebootPostExecute), r)
}

// ServersServerIdActionsReservePost mocks base method.
func (m *MockDefaultApi) ServersServerIdActionsReservePost(ctx context.Context, serverId string) bmcapi.ApiServersServerIdActionsReservePostRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServersServerIdActionsReservePost", ctx, serverId)
	ret0, _ := ret[0].(bmcapi.ApiServersServerIdActionsReservePostRequest)
	return ret0
}

// ServersServerIdActionsReservePost indicates an expected call of ServersServerIdActionsReservePost.
func (mr *MockDefaultApiMockRecorder) ServersServerIdActionsReservePost(ctx, serverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServersServerIdActionsReservePost", reflect.TypeOf((*MockDefaultApi)(nil).ServersServerIdActionsReservePost), ctx, serverId)
}

// ServersServerIdActionsReservePostExecute mocks base method.
func (m *MockDefaultApi) ServersServerIdActionsReservePostExecute(r bmcapi.ApiServersServerIdActionsReservePostRequest) (bmcapi.Server, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServersServerIdActionsReservePostExecute", r)
	ret0, _ := ret[0].(bmcapi.Server)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ServersServerIdActionsReservePostExecute indicates an expected call of ServersServerIdActionsReservePostExecute.
func (mr *MockDefaultApiMockRecorder) ServersServerIdActionsReservePostExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServersServerIdActionsReservePostExecute", reflect.TypeOf((*MockDefaultApi)(nil).ServersServerIdActionsReservePostExecute), r)
}

// ServersServerIdActionsResetPost mocks base method.
func (m *MockDefaultApi) ServersServerIdActionsResetPost(ctx context.Context, serverId string) bmcapi.ApiServersServerIdActionsResetPostRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServersServerIdActionsResetPost", ctx, serverId)
	ret0, _ := ret[0].(bmcapi.ApiServersServerIdActionsResetPostRequest)
	return ret0
}

// ServersServerIdActionsResetPost indicates an expected call of ServersServerIdActionsResetPost.
func (mr *MockDefaultApiMockRecorder) ServersServerIdActionsResetPost(ctx, serverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServersServerIdActionsResetPost", reflect.TypeOf((*MockDefaultApi)(nil).ServersServerIdActionsResetPost), ctx, serverId)
}

// ServersServerIdActionsResetPostExecute mocks base method.
func (m *MockDefaultApi) ServersServerIdActionsResetPostExecute(r bmcapi.ApiServersServerIdActionsResetPostRequest) (bmcapi.ResetResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServersServerIdActionsResetPostExecute", r)
	ret0, _ := ret[0].(bmcapi.ResetResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ServersServerIdActionsResetPostExecute indicates an expected call of ServersServerIdActionsResetPostExecute.
func (mr *MockDefaultApiMockRecorder) ServersServerIdActionsResetPostExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServersServerIdActionsResetPostExecute", reflect.TypeOf((*MockDefaultApi)(nil).ServersServerIdActionsResetPostExecute), r)
}

// ServersServerIdActionsShutdownPost mocks base method.
func (m *MockDefaultApi) ServersServerIdActionsShutdownPost(ctx context.Context, serverId string) bmcapi.ApiServersServerIdActionsShutdownPostRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServersServerIdActionsShutdownPost", ctx, serverId)
	ret0, _ := ret[0].(bmcapi.ApiServersServerIdActionsShutdownPostRequest)
	return ret0
}

// ServersServerIdActionsShutdownPost indicates an expected call of ServersServerIdActionsShutdownPost.
func (mr *MockDefaultApiMockRecorder) ServersServerIdActionsShutdownPost(ctx, serverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServersServerIdActionsShutdownPost", reflect.TypeOf((*MockDefaultApi)(nil).ServersServerIdActionsShutdownPost), ctx, serverId)
}

// ServersServerIdActionsShutdownPostExecute mocks base method.
func (m *MockDefaultApi) ServersServerIdActionsShutdownPostExecute(r bmcapi.ApiServersServerIdActionsShutdownPostRequest) (bmcapi.ActionResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServersServerIdActionsShutdownPostExecute", r)
	ret0, _ := ret[0].(bmcapi.ActionResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ServersServerIdActionsShutdownPostExecute indicates an expected call of ServersServerIdActionsShutdownPostExecute.
func (mr *MockDefaultApiMockRecorder) ServersServerIdActionsShutdownPostExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServersServerIdActionsShutdownPostExecute", reflect.TypeOf((*MockDefaultApi)(nil).ServersServerIdActionsShutdownPostExecute), r)
}

// ServersServerIdDelete mocks base method.
func (m *MockDefaultApi) ServersServerIdDelete(ctx context.Context, serverId string) bmcapi.ApiServersServerIdDeleteRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServersServerIdDelete", ctx, serverId)
	ret0, _ := ret[0].(bmcapi.ApiServersServerIdDeleteRequest)
	return ret0
}

// ServersServerIdDelete indicates an expected call of ServersServerIdDelete.
func (mr *MockDefaultApiMockRecorder) ServersServerIdDelete(ctx, serverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServersServerIdDelete", reflect.TypeOf((*MockDefaultApi)(nil).ServersServerIdDelete), ctx, serverId)
}

// ServersServerIdDeleteExecute mocks base method.
func (m *MockDefaultApi) ServersServerIdDeleteExecute(r bmcapi.ApiServersServerIdDeleteRequest) (bmcapi.DeleteResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServersServerIdDeleteExecute", r)
	ret0, _ := ret[0].(bmcapi.DeleteResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ServersServerIdDeleteExecute indicates an expected call of ServersServerIdDeleteExecute.
func (mr *MockDefaultApiMockRecorder) ServersServerIdDeleteExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServersServerIdDeleteExecute", reflect.TypeOf((*MockDefaultApi)(nil).ServersServerIdDeleteExecute), r)
}

// ServersServerIdGet mocks base method.
func (m *MockDefaultApi) ServersServerIdGet(ctx context.Context, serverId string) bmcapi.ApiServersServerIdGetRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServersServerIdGet", ctx, serverId)
	ret0, _ := ret[0].(bmcapi.ApiServersServerIdGetRequest)
	return ret0
}

// ServersServerIdGet indicates an expected call of ServersServerIdGet.
func (mr *MockDefaultApiMockRecorder) ServersServerIdGet(ctx, serverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServersServerIdGet", reflect.TypeOf((*MockDefaultApi)(nil).ServersServerIdGet), ctx, serverId)
}

// ServersServerIdGetExecute mocks base method.
func (m *MockDefaultApi) ServersServerIdGetExecute(r bmcapi.ApiServersServerIdGetRequest) (bmcapi.Server, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServersServerIdGetExecute", r)
	ret0, _ := ret[0].(bmcapi.Server)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ServersServerIdGetExecute indicates an expected call of ServersServerIdGetExecute.
func (mr *MockDefaultApiMockRecorder) ServersServerIdGetExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServersServerIdGetExecute", reflect.TypeOf((*MockDefaultApi)(nil).ServersServerIdGetExecute), r)
}

// ServersServerIdPrivateNetworksPost mocks base method.
func (m *MockDefaultApi) ServersServerIdPrivateNetworksPost(ctx context.Context, serverId string) bmcapi.ApiServersServerIdPrivateNetworksPostRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServersServerIdPrivateNetworksPost", ctx, serverId)
	ret0, _ := ret[0].(bmcapi.ApiServersServerIdPrivateNetworksPostRequest)
	return ret0
}

// ServersServerIdPrivateNetworksPost indicates an expected call of ServersServerIdPrivateNetworksPost.
func (mr *MockDefaultApiMockRecorder) ServersServerIdPrivateNetworksPost(ctx, serverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServersServerIdPrivateNetworksPost", reflect.TypeOf((*MockDefaultApi)(nil).ServersServerIdPrivateNetworksPost), ctx, serverId)
}

// ServersServerIdPrivateNetworksPostExecute mocks base method.
func (m *MockDefaultApi) ServersServerIdPrivateNetworksPostExecute(r bmcapi.ApiServersServerIdPrivateNetworksPostRequest) (bmcapi.ServerPrivateNetwork, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServersServerIdPrivateNetworksPostExecute", r)
	ret0, _ := ret[0].(bmcapi.ServerPrivateNetwork)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ServersServerIdPrivateNetworksPostExecute indicates an expected call of ServersServerIdPrivateNetworksPostExecute.
func (mr *MockDefaultApiMockRecorder) ServersServerIdPrivateNetworksPostExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServersServerIdPrivateNetworksPostExecute", reflect.TypeOf((*MockDefaultApi)(nil).ServersServerIdPrivateNetworksPostExecute), r)
}

// ServersServerIdTagsPut mocks base method.
func (m *MockDefaultApi) ServersServerIdTagsPut(ctx context.Context, serverId string) bmcapi.ApiServersServerIdTagsPutRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServersServerIdTagsPut", ctx, serverId)
	ret0, _ := ret[0].(bmcapi.ApiServersServerIdTagsPutRequest)
	return ret0
}

// ServersServerIdTagsPut indicates an expected call of ServersServerIdTagsPut.
func (mr *MockDefaultApiMockRecorder) ServersServerIdTagsPut(ctx, serverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServersServerIdTagsPut", reflect.TypeOf((*MockDefaultApi)(nil).ServersServerIdTagsPut), ctx, serverId)
}

// ServersServerIdTagsPutExecute mocks base method.
func (m *MockDefaultApi) ServersServerIdTagsPutExecute(r bmcapi.ApiServersServerIdTagsPutRequest) (bmcapi.Server, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServersServerIdTagsPutExecute", r)
	ret0, _ := ret[0].(bmcapi.Server)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ServersServerIdTagsPutExecute indicates an expected call of ServersServerIdTagsPutExecute.
func (mr *MockDefaultApiMockRecorder) ServersServerIdTagsPutExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServersServerIdTagsPutExecute", reflect.TypeOf((*MockDefaultApi)(nil).ServersServerIdTagsPutExecute), r)
}

// SshKeysGet mocks base method.
func (m *MockDefaultApi) SshKeysGet(ctx context.Context) bmcapi.ApiSshKeysGetRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SshKeysGet", ctx)
	ret0, _ := ret[0].(bmcapi.ApiSshKeysGetRequest)
	return ret0
}

// SshKeysGet indicates an expected call of SshKeysGet.
func (mr *MockDefaultApiMockRecorder) SshKeysGet(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SshKeysGet", reflect.TypeOf((*MockDefaultApi)(nil).SshKeysGet), ctx)
}

// SshKeysGetExecute mocks base method.
func (m *MockDefaultApi) SshKeysGetExecute(r bmcapi.ApiSshKeysGetRequest) ([]bmcapi.SshKey, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SshKeysGetExecute", r)
	ret0, _ := ret[0].([]bmcapi.SshKey)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SshKeysGetExecute indicates an expected call of SshKeysGetExecute.
func (mr *MockDefaultApiMockRecorder) SshKeysGetExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SshKeysGetExecute", reflect.TypeOf((*MockDefaultApi)(nil).SshKeysGetExecute), r)
}

// SshKeysPost mocks base method.
func (m *MockDefaultApi) SshKeysPost(ctx context.Context) bmcapi.ApiSshKeysPostRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SshKeysPost", ctx)
	ret0, _ := ret[0].(bmcapi.ApiSshKeysPostRequest)
	return ret0
}

// SshKeysPost indicates an expected call of SshKeysPost.
func (mr *MockDefaultApiMockRecorder) SshKeysPost(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SshKeysPost", reflect.TypeOf((*MockDefaultApi)(nil).SshKeysPost), ctx)
}

// SshKeysPostExecute mocks base method.
func (m *MockDefaultApi) SshKeysPostExecute(r bmcapi.ApiSshKeysPostRequest) (bmcapi.SshKey, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SshKeysPostExecute", r)
	ret0, _ := ret[0].(bmcapi.SshKey)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SshKeysPostExecute indicates an expected call of SshKeysPostExecute.
func (mr *MockDefaultApiMockRecorder) SshKeysPostExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SshKeysPostExecute", reflect.TypeOf((*MockDefaultApi)(nil).SshKeysPostExecute), r)
}

// SshKeysSshKeyIdDelete mocks base method.
func (m *MockDefaultApi) SshKeysSshKeyIdDelete(ctx context.Context, sshKeyId string) bmcapi.ApiSshKeysSshKeyIdDeleteRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SshKeysSshKeyIdDelete", ctx, sshKeyId)
	ret0, _ := ret[0].(bmcapi.ApiSshKeysSshKeyIdDeleteRequest)
	return ret0
}

// SshKeysSshKeyIdDelete indicates an expected call of SshKeysSshKeyIdDelete.
func (mr *MockDefaultApiMockRecorder) SshKeysSshKeyIdDelete(ctx, sshKeyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SshKeysSshKeyIdDelete", reflect.TypeOf((*MockDefaultApi)(nil).SshKeysSshKeyIdDelete), ctx, sshKeyId)
}

// SshKeysSshKeyIdDeleteExecute mocks base method.
func (m *MockDefaultApi) SshKeysSshKeyIdDeleteExecute(r bmcapi.ApiSshKeysSshKeyIdDeleteRequest) (bmcapi.DeleteSshKeyResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SshKeysSshKeyIdDeleteExecute", r)
	ret0, _ := ret[0].(bmcapi.DeleteSshKeyResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SshKeysSshKeyIdDeleteExecute indicates an expected call of SshKeysSshKeyIdDeleteExecute.
func (mr *MockDefaultApiMockRecorder) SshKeysSshKeyIdDeleteExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SshKeysSshKeyIdDeleteExecute", reflect.TypeOf((*MockDefaultApi)(nil).SshKeysSshKeyIdDeleteExecute), r)
}

// SshKeysSshKeyIdGet mocks base method.
func (m *MockDefaultApi) SshKeysSshKeyIdGet(ctx context.Context, sshKeyId string) bmcapi.ApiSshKeysSshKeyIdGetRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SshKeysSshKeyIdGet", ctx, sshKeyId)
	ret0, _ := ret[0].(bmcapi.ApiSshKeysSshKeyIdGetRequest)
	return ret0
}

// SshKeysSshKeyIdGet indicates an expected call of SshKeysSshKeyIdGet.
func (mr *MockDefaultApiMockRecorder) SshKeysSshKeyIdGet(ctx, sshKeyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SshKeysSshKeyIdGet", reflect.TypeOf((*MockDefaultApi)(nil).SshKeysSshKeyIdGet), ctx, sshKeyId)
}

// SshKeysSshKeyIdGetExecute mocks base method.
func (m *MockDefaultApi) SshKeysSshKeyIdGetExecute(r bmcapi.ApiSshKeysSshKeyIdGetRequest) (bmcapi.SshKey, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SshKeysSshKeyIdGetExecute", r)
	ret0, _ := ret[0].(bmcapi.SshKey)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SshKeysSshKeyIdGetExecute indicates an expected call of SshKeysSshKeyIdGetExecute.
func (mr *MockDefaultApiMockRecorder) SshKeysSshKeyIdGetExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SshKeysSshKeyIdGetExecute", reflect.TypeOf((*MockDefaultApi)(nil).SshKeysSshKeyIdGetExecute), r)
}

// SshKeysSshKeyIdPut mocks base method.
func (m *MockDefaultApi) SshKeysSshKeyIdPut(ctx context.Context, sshKeyId string) bmcapi.ApiSshKeysSshKeyIdPutRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SshKeysSshKeyIdPut", ctx, sshKeyId)
	ret0, _ := ret[0].(bmcapi.ApiSshKeysSshKeyIdPutRequest)
	return ret0
}

// SshKeysSshKeyIdPut indicates an expected call of SshKeysSshKeyIdPut.
func (mr *MockDefaultApiMockRecorder) SshKeysSshKeyIdPut(ctx, sshKeyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SshKeysSshKeyIdPut", reflect.TypeOf((*MockDefaultApi)(nil).SshKeysSshKeyIdPut), ctx, sshKeyId)
}

// SshKeysSshKeyIdPutExecute mocks base method.
func (m *MockDefaultApi) SshKeysSshKeyIdPutExecute(r bmcapi.ApiSshKeysSshKeyIdPutRequest) (bmcapi.SshKey, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SshKeysSshKeyIdPutExecute", r)
	ret0, _ := ret[0].(bmcapi.SshKey)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SshKeysSshKeyIdPutExecute indicates an expected call of SshKeysSshKeyIdPutExecute.
func (mr *MockDefaultApiMockRecorder) SshKeysSshKeyIdPutExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SshKeysSshKeyIdPutExecute", reflect.TypeOf((*MockDefaultApi)(nil).SshKeysSshKeyIdPutExecute), r)
}
