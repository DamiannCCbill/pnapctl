// Code generated by MockGen. DO NOT EDIT.
// Source: common/client/billing/client.go

// Package sdkmocks is a generated GoMock package.
package sdkmocks

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	billingapi "github.com/phoenixnap/go-sdk-bmc/billingapi"
	billingmodels "phoenixnap.com/pnapctl/common/models/billingmodels"
)

// MockBillingSdkClient is a mock of BillingSdkClient interface.
type MockBillingSdkClient struct {
	ctrl     *gomock.Controller
	recorder *MockBillingSdkClientMockRecorder
}

// MockBillingSdkClientMockRecorder is the mock recorder for MockBillingSdkClient.
type MockBillingSdkClientMockRecorder struct {
	mock *MockBillingSdkClient
}

// NewMockBillingSdkClient creates a new mock instance.
func NewMockBillingSdkClient(ctrl *gomock.Controller) *MockBillingSdkClient {
	mock := &MockBillingSdkClient{ctrl: ctrl}
	mock.recorder = &MockBillingSdkClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingSdkClient) EXPECT() *MockBillingSdkClientMockRecorder {
	return m.recorder
}

// RatedUsageGet mocks base method.
func (m *MockBillingSdkClient) RatedUsageGet(queryParams billingmodels.RatedUsageGetQueryParams) ([]billingapi.RatedUsageGet200ResponseInner, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RatedUsageGet", queryParams)
	ret0, _ := ret[0].([]billingapi.RatedUsageGet200ResponseInner)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RatedUsageGet indicates an expected call of RatedUsageGet.
func (mr *MockBillingSdkClientMockRecorder) RatedUsageGet(queryParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RatedUsageGet", reflect.TypeOf((*MockBillingSdkClient)(nil).RatedUsageGet), queryParams)
}

// RatedUsageMonthToDateGet mocks base method.
func (m *MockBillingSdkClient) RatedUsageMonthToDateGet(queryParams billingmodels.RatedUsageGetMonthToDateQueryParams) ([]billingapi.RatedUsageGet200ResponseInner, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RatedUsageMonthToDateGet", queryParams)
	ret0, _ := ret[0].([]billingapi.RatedUsageGet200ResponseInner)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RatedUsageMonthToDateGet indicates an expected call of RatedUsageMonthToDateGet.
func (mr *MockBillingSdkClientMockRecorder) RatedUsageMonthToDateGet(queryParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RatedUsageMonthToDateGet", reflect.TypeOf((*MockBillingSdkClient)(nil).RatedUsageMonthToDateGet), queryParams)
}
