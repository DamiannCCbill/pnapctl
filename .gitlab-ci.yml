image: docker:latest
services:
  - docker:dind
  
variables:
  PACKAGE_PATH: /go/src/phoenixnap.com/pnap-cli
  CLI_NAME: pnapctl
  ARTEFACT_FOLDER: build

stages:  
  - test
  - build
  - dev-portal-deploy
  - prod-portal-deploy

# A hack to make Golang-in-Gitlab happy
.anchors:
  - &inject-gopath
      mkdir -p $(dirname ${PACKAGE_PATH})
      && ln -s ${CI_PROJECT_DIR} ${PACKAGE_PATH}
      && cd ${PACKAGE_PATH}      
  
test:
  stage: test
  image: golang:1.13.1
  cache:
    key: godep
    paths:
      - .cache
  before_script:
    - apt-get install curl git
    - *inject-gopath
    - go get "github.com/golang/mock/mockgen"
    - go get -u "github.com/jstemmer/go-junit-report"
  script:
    #-vet-off is required due to failures in using gcc 
    - go test ./... -v -vet=off 2>&1 | go-junit-report > report.xml
  after_script:
    #copy over $GOPATH directory to a local cache dir. This will be cached. Necessary since 
    #GL doesn't cache dirs outside the CI_PROJECT_DIR path
    - mkdir -p .cache && cp -R $GOPATH .cache
  artifacts:
    when: always
    reports:
      junit: report.xml


build:
  stage: build
#  only:
#    - master
#    - tags
  image: golang:1.13.1
  cache:
    key: godep
    paths:
      - .cache
    #only pull dependencies - this will not be push-pull
    policy: pull
  before_script:
    - apt-get update
    - apt-get install -y curl git zip
    - *inject-gopath
    - cp -R .cache/go/* $GOPATH
    - go get "github.com/mitchellh/gox"
    - go get "github.com/inconshreveable/mousetrap"
  script:
    - gox -osarch="linux/amd64 windows/amd64" -output=./${ARTEFACT_FOLDER}/${CLI_NAME}
    - cd ./${ARTEFACT_FOLDER}
    - tar -czf ${CLI_NAME}.tar.gz ${CLI_NAME}
    - zip ${CLI_NAME}.zip ${CLI_NAME}.exe
  artifacts:
    when: on_success
    paths:
      - ./${ARTEFACT_FOLDER}/${CLI_NAME}.zip
      - ./${ARTEFACT_FOLDER}/${CLI_NAME}.tar.gz

.portal-deployment:
  image: registry.gitlab.com/phoenixnap/platform-api/apigee-automation:0.0.6
  only:
    - master
  script:
    - /automation/upload_single_asset.py --file ./${ARTEFACT_FOLDER}/${CLI_NAME}.zip --portal "$APIGEE_PORTAL" --org $ORG_NAME --username $APIGEE_USER --password $APIGEE_PASSWORD
    - /automation/upload_single_asset.py --file ./${ARTEFACT_FOLDER}/${CLI_NAME}.tar.gz --portal "$APIGEE_PORTAL" --org $ORG_NAME --username $APIGEE_USER --password $APIGEE_PASSWORD

portal-dev-deploy:
  extends: .portal-deployment
  stage: dev-portal-deploy
  environment:
    name: dev

portal-prod-deploy:
  extends: .portal-deployment
  stage: prod-portal-deploy
  environment:
    name: prod
  only:
    - tags



