image: docker:latest
services:
  - docker:dind
  
variables:
  PACKAGE_PATH: /go/src/phoenixnap.com/pnap-cli
  CLI_NAME: pnapctl
  ARTEFACT_FOLDER: build

stages:  
  - test
  - build
  - dev-portal-deploy

# A hack to make Golang-in-Gitlab happy
.anchors:
  - &inject-gopath
      mkdir -p $(dirname ${PACKAGE_PATH})
      && ln -s ${CI_PROJECT_DIR} ${PACKAGE_PATH}
      && cd ${PACKAGE_PATH}      
  
test:
  stage: test   
  only:
    - master
  image: golang:1.13.1-alpine3.10  
  cache:
    key: godep
    paths:
      - .cache
  before_script:
    - apk add --no-cache curl git
    - *inject-gopath
    - go get 
    - go get "github.com/golang/mock/mockgen"
    - go get -u "github.com/jstemmer/go-junit-report"
  script:
    #-vet-off is required due to failures in using gcc 
    - go test ./... -v -vet=off 2>&1 | go-junit-report > report.xml                 
  after_script:
    #copy over $GOPATH directory to a local cache dir. This will be cached. Necessary since 
    #GL doesn't cache dirs outside the CI_PROJECT_DIR path
    - mkdir -p .cache && cp -R $GOPATH .cache
  artifacts:
    when: always
    reports:
      junit: report.xml


build:
  stage: build
  # only:
  #   - master
  image: golang:1.13.1-alpine3.10
  cache:
    key: godep
    paths:
      - .cache
    #only pull dependencies - this will not be push-pull
    policy: pull
  before_script:
    - apk add --no-cache curl git zip
    - *inject-gopath
    - cp -R .cache/go/* $GOPATH
    - go get "github.com/mitchellh/gox"
    - go get "github.com/inconshreveable/mousetrap"
  script:
    - pwd
    - ls -lh
    - gox -osarch="linux/amd64 windows/amd64" -output=./${ARTEFACT_FOLDER}/output
    - cd ./${ARTEFACT_FOLDER}
    - mv output ${CLI_NAME}
    - tar -czf ${CLI_NAME}.tar.gz ${CLI_NAME}
    - mv output.exe ${CLI_NAME}.exe
    - zip ${CLI_NAME}.zip ${CLI_NAME}.exe
  artifacts:
    when: on_success
    paths:
      - ./${ARTEFACT_FOLDER}/${CLI_NAME}
      - ./${ARTEFACT_FOLDER}/${CLI_NAME}.zip
      - ./${ARTEFACT_FOLDER}/${CLI_NAME}.tar.gz

portal-deploy:
  image: registry.gitlab.com/phoenixnap/platform-api/apigee-automation:0.0.5
  stage: dev-portal-deploy
  environment:
    name: dev
  only:
    - master
  script:
    - ls
    - pwd
    - /automation/upload_single_asset.py --file ./${ARTEFACT_FOLDER}/${CLI_NAME}.zip --portal $APIGEE_PORTAL --org $ORG_NAME --username $APIGEE_USER --password $APIGEE_PASSWORD
    - /automation/upload_single_asset.py --file ./${ARTEFACT_FOLDER}/${CLI_NAME}.tar.gz --portal $APIGEE_PORTAL --org $ORG_NAME --username $APIGEE_USER --password $APIGEE_PASSWORD



